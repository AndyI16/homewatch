

Some month ago I ordered three TFA Dostmann wireless temperature/humidity sensors and a weather station to see temperature data for various places inside the house and the outdoor temperature. These devices operate at 433.92MHz and although the weather station also shows some history I liked to have a better overview of the data over a longer time.

I have read about the hope RFM12 can be operated as OOK receiver and found the Pollin AVR-NetIO and it's Addon-Board. I decided for this cheap device, as the addon board offers RFM12, a LCD connector, a SD card slot and the main netio boad supports ethernet.

_The Pollin AVR-Netio_

The netio board was assembled by me and was easy to build (I ordered both Pollin boards as DIY kits). The netio operates with an Atmel AVR Atmega32 processor and Pollin offers a windows application as download. The windows application is very basic and enables you to switch the digital lines and read the analog lines. My first surprise was the windows app's LCD control. It is NOT designed for the LCD connector at the addon board and uses different pins and controls. I was getting angry about this kind of support for the addon board. Pollin does not supply the source code of the netio firmware nor do they offer the source code of the windows application. And, the most worse, there is no library or code provided to support the addon hardware! No code and no sample for how to access the sd card (I could need for logging data), the RFM12 or the LCD.

So I did the addon board aside and concentrated first on the netio. There are various firmware replacements for the netio. The board is similar to the etherboard by Ulrich Radig. But all the firmwares only support the RFM12 as OOK sender, no code to receive data.

Then I ordered a pair of a simple 433MHz receiver/transmitter via ebay from hongkong. After some weeks I got the set. It was easy to connect the receiver to the netio, but I first did not find any receiver code that was able to decode my wireless sensors.

I started to use protocol analysers, captured the receiver data using my PC's sound card. I opened one of the sensors and fortunately the sender was a separate modul with written connections. I attached the data signal header directly to my sound card and tried protocol analyser and code samples. But all this did not help to be able to decode the signal of the wireless sensors until I found fuzzylogic code repository at https://bitbucket.org/fuzzillogic/433mhzforarduino/overview. The main cause of this finding was the printing of Hideki on the print boards inside the sensor.


